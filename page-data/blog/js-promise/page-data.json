{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/js-promise","result":{"data":{"mdx":{"id":"4758948e-83f3-58bd-b277-4e25664add07","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/blog/js-promise\",\n  \"date\": \"2019-12-5\",\n  \"title\": \"手動實現 Promise\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"1. \\u624B\\u52D5\\u5BE6\\u73FEPromise\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://promisesaplus.com/\"\n  }), \"Promise/A+\"), \" \\u53C3\\u8003\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/forthealllight/blog/issues/4\"\n  }), \"\\u5B9E\\u73B0\\u4E00\\u4E2A\\u5B8C\\u7F8E\\u7B26\\u5408Promise/A+\\u89C4\\u8303\\u7684Promise\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    function MyPromise(constructor) {\\n        let self = this;\\n\\n        self.status = 'pending';\\n        self.value = undefined;\\n        self.reason = undefined;\\n        self.onFullfilledArray = [];\\n        self.onRejectedArray = [];\\n\\n        function resolve(value) {\\n            if (self.status === 'pending') {\\n                self.status === 'resolved'\\n                self.value = value;\\n                self.onFullfilledArray.forEach(function(f) {\\n                    f(self.value);\\n                })\\n            }\\n        }\\n\\n        function reject(reason) {\\n            if (self.status === 'pending') {\\n                self.status === 'rejected'\\n                self.reason = reason\\n                self.onRejectedArray.forEach(function(f) {\\n                    f(self.reason);\\n                })\\n            }\\n        }\\n\\n        try {\\n            constructor(resolve, reject)\\n        } catch(err) {\\n            reject(err);\\n        }\\n    }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".then\"), \" \\u65B9\\u6CD5\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"    MyPromise.prototype.then = function(onFullfilled, onRejected) {\\n        let self = this;\\n        let promise2;\\n\\n        switch(self.status) {\\n            case \\\"pending\\\":\\n                promise2 = new MyPromise(function(resolve, reject) {\\n                    self.onFullfilledArray.push(function(\\n                        setTimeout(function() {\\n                            try {\\n                                let temple = onFullfilled(self.value);\\n                                resolvePromise(temple);\\n                            } catch(e) {\\n                                reject(e);\\n                            }\\n                        })\\n                    ));\\n                    self.onRejectedArray.push(function(){\\n                        setTimeout(function() {\\n                            try {\\n                                let temple = onRejected(self.reason);\\n                                resolvePromise(temple);\\n                            } catch (e) {\\n                                reject(e);\\n                            }\\n                        })\\n                    })\\n                })\\n                break;\\n            case \\\"resolved\\\":\\n                promise2 = new MyPromise(function(resolve, reject) {\\n                    setTimeout(function() {\\n                        try {\\n                            let temple = onFullfilled(self.value);\\n                            resolvePromise(temple);\\n                        } catch(e) {\\n                            reject(e);\\n                        }\\n                    })\\n                })\\n                break;\\n            case \\\"rejected\\\":\\n                promise2 = new MyPromise(function(resolve, reject) {\\n                    setTimeout(function() {\\n                        try {\\n                            let temple = onRejected(self.reason);\\n                            resolvePromise(temple);\\n                        } catch(e) {\\n                            reject(e);\\n                        }\\n                    })\\n                })\\n                break;\\n            default:\\n        }\\n        return promise2\\n    }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resolvePromise\"), \"\\u51FD\\u6570\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function resolvePromise(promise, x, resolve, reject) {\\n    if (promise === x) {\\n        throw new TypeError(\\\"type error\\\");\\n    }\\n\\n    let isUsed;\\n\\n    if (x !== null && typeof x === 'object'|| typeof x === 'function') {\\n        try {\\n            let then = x.then;\\n            if (typeof then === 'function') {\\n                then.call(x, function(y) {\\n                    if (isUsed) return;\\n                    isUsed = true;\\n                    resolvePromise(promise, y, resolve, reject);\\n                }, function(e) {\\n                    if (isUsed) return;\\n                    isUsed = true;\\n                    reject(e);\\n                })\\n            } else {\\n                resolve(x);\\n            }\\n        } catch(e) {\\n            if (isUsed) return;\\n            isUsed = true;\\n            reject(e);\\n        }\\n    } else {\\n        resolve(x);\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"手動實現 Promise"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"4758948e-83f3-58bd-b277-4e25664add07","previous":{"node":{"id":"06ca813e-9699-58bf-9590-2e112f767cfb","frontmatter":{"path":"/blog/React-Beautiful-DnD-create-a-trello-mimic","title":"使用 React-Beautiful-DnD 建立一個 Trello mimic"}}},"next":{"node":{"id":"a3b39f68-7e07-53c1-b0f3-b7bdb60a36b1","frontmatter":{"path":"call-bind-apply","title":"手動實現call, bind, apply函式"}}}}}}